"use strict";

var _index = _interopRequireWildcard(require("./index"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

it('exports updateInputWidth() by default', function () {
  expect(_index["default"]).toBeDefined();
  expect(_index["default"]).toBe(_index.updateInputWidth);
});
describe('updateInputWidth()', function () {
  it('sets valid width given empty input with placeholder', function () {
    var element = document.createElement('input');
    element.style.fontFamily = 'Arial';
    element.style.fontSize = '20px';
    var result = (0, _index.updateInputWidth)(element);
    expect(result).toEqual(expect.any(Number));
  });
});
describe('getFontShorthand()', function () {
  it('returns valid font shorthand for a given element', function () {
    var element = document.createElement('input');
    element.style.fontFamily = 'Arial';
    element.style.fontSize = '20px';
    var result = (0, _index.getFontShorthand)(element);
    expect(result).toEqual(expect.any(String));
  });
});
describe('measureText()', function () {
  it('returns valid measurement given text and font CSS shorthand', function () {
    var text = 'Hello world';
    var font = 'normal normal 600 normal 20px / 25px Arial, sans-serif';
    var result = (0, _index.measureText)(text, font);
    expect(result).toEqual(expect.any(Number));
  });
});